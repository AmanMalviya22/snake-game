{"version":3,"sources":["components/SnakeHeader/SnakeHeader.js","components/ScoreBoard/ScoreBoard.js","components/BoardCell/BoardCell.js","components/GameBoard/GameBoard.js","classes/LinkedList.js","classes/Queue.js","App.js","reportWebVitals.js","index.js"],"names":["SnakeHeader","_jsx","className","children","ScoreBoard","props","_jsxs","currentScore","bestScore","BoardCell","cell","cellType","foodClass","GameBoard","board","boardWidth","boardHeight","snake","foodCoordinate","i","row","j","isHead","push","isOn","Snake","constructor","this","head","tail","size","coordinates","skipHead","current","next","eat","tailDirection","direction","newTailCoordinates","add","Body","body","clear","TurningPoint","nextDirection","App","Component","super","foodClasses","turningPoints","snakeDelay","allowSwipe","mode","eatAudio","Audio","gameOverAudio","state","gameOverMsg","getRandomInt","length","gameOverDisplay","gameMenuDisplay","updateSnakeState","bind","onSwipeMove","keyListner","startGame","gameOver","endGame","componentDidMount","load","document","addEventListener","componentWillUnmount","removeEventListener","event","keyCode","tempSnake","turningPoint","setState","getBestScore","intervalId","window","setInterval","currentBodyPiece","some","x","filter","shift","newScore","newFoodX","newFoodY","play","clearInterval","localStorage","setItem","getItem","parseInt","min","max","Math","ceil","floor","random","position","y","abs","render","onTouchStart","Swipe","onClick","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e65a5094.chunk.js","sourcesContent":["import \"../../App.css\";\nimport \"../../utils.css\";\n\nfunction SnakeHeader() {\n    return (\n        <div className=\"flex\">\n            <div className=\"title\">SNAKE</div>\n        </div>\n    );\n}\n\nexport default SnakeHeader;\n","import \"../../App.css\";\nimport \"../../utils.css\";\n\nconst ScoreBoard = (props) => {\n    return (\n        <div className=\"flex flex-col\">\n            <div className=\"score\">{props.currentScore}</div>\n            <div className=\"best-score\">\n                <span className=\"subTitle\">{\"best:\"}&nbsp;</span>\n                {props.bestScore}\n            </div>\n        </div>\n    );\n};\n\nexport default ScoreBoard;\n","import \"../../App.css\";\nimport \"../../utils.css\";\n\nconst BoardCell = (props) => {\n    let cellType = props.cellType;\n    let cell;\n\n    switch (cellType) {\n        case \"none\":\n            cell = <div></div>;\n            break;\n        case \"head\":\n            cell = <div className=\"snake-head\"></div>;\n            break;\n        case \"body\":\n            cell = <div className=\"snake-body\"></div>;\n            break;\n        case \"food\":\n            cell = <div className={\"snake-food \" + props.foodClass}></div>;\n            break;\n        default:\n            cell = <div></div>;\n            break;\n    }\n\n    return <div className=\"board-cell flex-center\">{cell}</div>;\n};\n\nexport default BoardCell;\n","import \"../../App.css\";\nimport \"../../utils.css\";\nimport BoardCell from \"../BoardCell/BoardCell\";\nimport { React } from \"react\";\n\nconst GameBoard = (props) => {\n    let board = [];\n    let boardWidth = props.boardWidth;\n    let boardHeight = props.boardHeight;\n\n    let snake = props.snake;\n    let foodCoordinate = props.foodCoordinate;\n\n    for (let i = 0; i < boardHeight; i++) {\n        let row = [];\n\n        for (let j = 0; j < boardWidth; j++) {\n            if (snake.isHead([i, j])) row.push(<BoardCell cellType=\"head\" />);\n            else if (snake.isOn([i, j]))\n                row.push(<BoardCell cellType=\"body\" />);\n            else if (foodCoordinate[0] === i && foodCoordinate[1] === j)\n                row.push(\n                    <BoardCell foodClass={props.foodClass} cellType=\"food\" />\n                );\n            else row.push(<BoardCell cellType=\"none\" />);\n        }\n\n        board.push(row);\n    }\n    return (\n        <div className=\"flex\">\n            <div className=\"game-board\">{board}</div>\n        </div>\n    );\n};\n\nexport default GameBoard;\n","export class Snake {\n    constructor() {\n        this.head = null;\n        this.tail = true;\n        this.size = 0;\n    }\n\n    isHead(coordinates) {\n        return (\n            this.head.coordinates[0] === coordinates[0] &&\n            this.head.coordinates[1] === coordinates[1]\n        );\n    }\n\n    isOn(coordinates, skipHead) {\n        if (this.head == null) return false;\n\n        var current = skipHead ? this.head.next: this.head;\n\n        while (current) {\n            if (\n                current.coordinates[0] === coordinates[0] &&\n                current.coordinates[1] === coordinates[1]\n            )\n                return true;\n\n            current = current.next;\n        }\n        return false;\n    }\n\n    eat() {\n        let current = this.head;\n\n        while (current.next) current = current.next;\n\n        let tailDirection = current.direction;\n        let newTailCoordinates = \"R\";\n\n        switch(tailDirection) {\n            case \"T\":\n                newTailCoordinates = [current.coordinates[0] + 1, current.coordinates[1]];\n                break;\n\n            case \"R\":\n                newTailCoordinates = [current.coordinates[0], current.coordinates[1] - 1];\n                break;\n\n            case \"B\":\n                newTailCoordinates = [current.coordinates[0] - 1, current.coordinates[1]];\n                break;\n\n            case \"L\":\n                newTailCoordinates = [current.coordinates[0], current.coordinates[1] + 1];\n                break;\n\n            default:\n                break;\n        }\n\n        this.add(new Body(newTailCoordinates, tailDirection));\n    }\n\n    add(body) {\n        var current;\n        body.tail = true;\n\n        if (this.head == null) this.head = body;\n        else {\n            current = this.head;\n\n            while (current.next) current = current.next;\n            current.tail = false;\n\n            current.next = body;\n        }\n        this.size++;\n    }\n\n    clear(body) {\n        this.head = null;\n        this.size = 0;\n    }\n}\n\nexport class Body {\n    constructor(coordinates, direction) {\n        this.coordinates = coordinates;\n        this.direction = direction;\n        this.next = null;\n    }\n}\n","export class TurningPoint {\n    constructor(coordinates, nextDirection) {\n        this.coordinates = coordinates;\n        this.nextDirection = nextDirection;\n    }\n}\n","import SnakeHeader from \"./components/SnakeHeader/SnakeHeader\";\nimport ScoreBoard from \"./components/ScoreBoard/ScoreBoard\";\nimport GameBoard from \"./components/GameBoard/GameBoard\";\nimport { Body, Snake } from \"./classes/LinkedList\";\nimport { TurningPoint } from \"./classes/Queue\";\nimport Swipe from \"react-easy-swipe\";\n\nimport React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport \"./utils.css\";\n\nclass App extends Component\n{\n    constructor()\n    {\n        super();\n\n        this.foodClasses = [\n            \"blueberry\",\n            \"cherry\",\n            \"grapes\",\n            \"raspberry\",\n            \"strawberry\",\n        ];\n        this.turningPoints = [];\n        this.boardWidth = 20;\n        this.boardHeight = 15;\n        this.snakeDelay = 100;\n        this.allowSwipe = true;\n        this.mode = 'easy'\n\n        this.eatAudio = new Audio(\n            \"https://github.com/diozz/snake-react-js/raw/main/src/sounds/eat.mp3\"\n        );\n        this.gameOverAudio = new Audio(\n            \"https://github.com/diozz/snake-react-js/raw/main/src/sounds/game-over.mp3\"\n        );\n\n        let snake = new Snake();\n\n        snake.add(new Body([1, 3], \"R\"));\n        snake.add(new Body([1, 2], \"R\"));\n        snake.add(new Body([1, 1], \"R\"));\n\n        this.state = {\n            currentScore: 0,\n            bestScore: '--',\n            gameOverMsg: \"\",\n            snake: snake,\n            foodCoordinate: [8, 18],\n            foodClass: this.foodClasses[\n                this.getRandomInt(0, this.foodClasses.length - 1)\n            ],\n            gameOverDisplay: false,\n            gameMenuDisplay: true,\n        };\n\n        this.updateSnakeState = this.updateSnakeState.bind(this);\n        this.onSwipeMove = this.onSwipeMove.bind(this);\n        this.keyListner = this.keyListner.bind(this);\n        this.startGame = this.startGame.bind(this);\n        this.gameOver = this.gameOver.bind(this);\n        this.endGame = this.endGame.bind(this);\n    }\n\n    componentDidMount()\n    {\n        this.eatAudio.load();\n        this.gameOverAudio.load();\n\n        document.addEventListener(\"keydown\", this.keyListner, false);\n    }\n\n    componentWillUnmount()\n    {\n        document.removeEventListener(\"keydown\", this.keyListner, false);\n    }\n\n    keyListner(event)\n    {\n        if (this.state.gameMenuDisplay || this.state.gameOverDisplay) return;\n\n        let keyCode = event.keyCode;\n        let tempSnake = this.state.snake;\n\n        let turningPoint = new TurningPoint(null, null);\n\n        switch (keyCode)\n        {\n            case 38:\n                if (\n                    tempSnake.head.direction === \"T\" ||\n                    tempSnake.head.direction === \"B\"\n                )\n                    return;\n\n                turningPoint.nextDirection = \"T\";\n                turningPoint.coordinates = [...tempSnake.head.coordinates];\n                this.turningPoints.push(turningPoint);\n\n                this.setState({ snake: tempSnake });\n                break;\n\n            case 39:\n                if (\n                    tempSnake.head.direction === \"R\" ||\n                    tempSnake.head.direction === \"L\"\n                )\n                    return;\n\n                turningPoint.nextDirection = \"R\";\n                turningPoint.coordinates = [...tempSnake.head.coordinates];\n                this.turningPoints.push(turningPoint);\n\n                this.setState({ snake: tempSnake });\n                break;\n\n            case 40:\n                if (\n                    tempSnake.head.direction === \"B\" ||\n                    tempSnake.head.direction === \"T\"\n                )\n                    return;\n\n                turningPoint.nextDirection = \"B\";\n                turningPoint.coordinates = [...tempSnake.head.coordinates];\n                this.turningPoints.push(turningPoint);\n\n                this.setState({ snake: tempSnake });\n                break;\n\n            case 37:\n                if (\n                    tempSnake.head.direction === \"L\" ||\n                    tempSnake.head.direction === \"R\"\n                )\n                    return;\n\n                turningPoint.nextDirection = \"L\";\n                turningPoint.coordinates = [...tempSnake.head.coordinates];\n                this.turningPoints.push(turningPoint);\n\n                this.setState({ snake: tempSnake });\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    startGame(snakeDelay)\n    {\n        switch (snakeDelay)\n        {\n            case 75: this.mode = 'hard'; break;\n            case 120: this.mode = 'medium'; break;\n            case 200: this.mode = 'easy'; break;\n        }\n\n        this.snakeDelay = snakeDelay;\n        this.setState({ gameMenuDisplay: false, gameOverDisplay: false, bestScore: this.getBestScore(this.mode) });\n\n        this.intervalId = window.setInterval(\n            this.updateSnakeState,\n            this.snakeDelay\n        );\n    }\n\n    endGame()\n    {\n        let snake = new Snake();\n\n        snake.add(new Body([1, 3], \"R\"));\n        snake.add(new Body([1, 2], \"R\"));\n        snake.add(new Body([1, 1], \"R\"));\n\n        this.setState({\n            currentScore: 0,\n            snake: snake,\n            bestScore: '--',\n            foodCoordinate: [8, 18],\n            foodClass: this.foodClasses[\n                this.getRandomInt(0, this.foodClasses.length - 1)\n            ],\n            gameOverDisplay: false,\n            gameMenuDisplay: true,\n        });\n    }\n\n    updateSnakeState()\n    {\n        let tempSnake = this.state.snake;\n        let currentBodyPiece = tempSnake.head;\n\n        if (tempSnake.isOn(currentBodyPiece.coordinates, true))\n        {\n            this.gameOver();\n            return;\n        }\n\n        //gameOverDetection\n        switch (currentBodyPiece.direction)\n        {\n            case \"T\":\n                if (currentBodyPiece.coordinates[0] < 0)\n                {\n                    this.gameOver();\n                    return;\n                }\n                break;\n\n            case \"R\":\n                if (currentBodyPiece.coordinates[1] > this.boardWidth - 1)\n                {\n                    this.gameOver();\n                    return;\n                }\n                break;\n\n            case \"B\":\n                if (currentBodyPiece.coordinates[0] > this.boardHeight - 1)\n                {\n                    this.gameOver();\n                    return;\n                }\n                break;\n\n            case \"L\":\n                if (currentBodyPiece.coordinates[1] < 0)\n                {\n                    this.gameOver();\n                    return;\n                }\n                break;\n\n            default:\n                break;\n        }\n\n        //updateSnakePosition\n        while (currentBodyPiece)\n        {\n            if (\n                this.turningPoints.some(\n                    (x) =>\n                        x.coordinates[0] === currentBodyPiece.coordinates[0] &&\n                        x.coordinates[1] === currentBodyPiece.coordinates[1]\n                )\n            )\n            {\n                currentBodyPiece.direction = this.turningPoints.filter(\n                    (x) =>\n                        x.coordinates[0] === currentBodyPiece.coordinates[0] &&\n                        x.coordinates[1] === currentBodyPiece.coordinates[1]\n                )[0].nextDirection;\n\n                if (currentBodyPiece.tail) this.turningPoints.shift();\n            }\n\n            switch (currentBodyPiece.direction)\n            {\n                case \"T\":\n                    currentBodyPiece.coordinates[0]--;\n                    break;\n\n                case \"R\":\n                    currentBodyPiece.coordinates[1]++;\n                    break;\n\n                case \"B\":\n                    currentBodyPiece.coordinates[0]++;\n                    break;\n\n                case \"L\":\n                    currentBodyPiece.coordinates[1]--;\n                    break;\n\n                default:\n                    break;\n            }\n\n            currentBodyPiece = currentBodyPiece.next;\n        }\n\n        //Ate.\n        if (\n            tempSnake.head.coordinates[0] === this.state.foodCoordinate[0] &&\n            tempSnake.head.coordinates[1] === this.state.foodCoordinate[1]\n        )\n        {\n            let newScore = this.state.currentScore + 5;\n            let newFoodX = 0;\n            let newFoodY = 0;\n\n            while (true)\n            {\n                newFoodY = this.getRandomInt(0, this.boardHeight - 1);\n                newFoodX = this.getRandomInt(0, this.boardWidth - 1);\n\n                if (\n                    newFoodY === this.state.foodCoordinate[0] &&\n                    newFoodX === this.state.foodCoordinate[1]\n                )\n                    continue;\n\n                if (tempSnake.isOn([newFoodY, newFoodX])) continue;\n\n                break;\n            }\n\n            tempSnake.eat();\n            this.eatAudio.play();\n\n            this.setState({\n                snake: tempSnake,\n                currentScore: newScore,\n                foodCoordinate: [newFoodY, newFoodX],\n                foodClass: this.foodClasses[\n                    this.getRandomInt(0, this.foodClasses.length - 1)\n                ],\n            });\n        } else\n        {\n            this.setState({ snake: tempSnake });\n        }\n    }\n\n    gameOver()\n    {\n        this.gameOverAudio.play();\n\n        clearInterval(this.intervalId);\n        this.turningPoints = [];\n        let gameOverMsg = 'GAME OVER!';\n        let bestScore = this.getBestScore(this.mode);\n        if (this.state.currentScore > bestScore)\n        {\n            localStorage.setItem(this.mode + \"BestScore\", this.state.currentScore);\n            bestScore = this.state.currentScore;\n            gameOverMsg = \"NEW BEST!\";\n        }\n\n        this.setState({\n            gameOverDisplay: true,\n            bestScore: bestScore,\n            gameOverMsg: gameOverMsg,\n        });\n    }\n\n    getBestScore(mode)\n    {\n        let bestScore = localStorage.getItem(mode + \"BestScore\");\n        bestScore = bestScore === null ? 0 : parseInt(bestScore);\n        return bestScore;\n    }\n\n    getRandomInt(min, max)\n    {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    onSwipeMove(position, event)\n    {\n        if (this.state.gameMenuDisplay || this.state.gameOverDisplay) return;\n\n        let tolerance = 2;\n        let x = position.x;\n        let y = position.y;\n\n        if (this.allowSwipe)\n        {\n            if (Math.abs(x) > tolerance || Math.abs(y) > tolerance)\n            {\n                this.allowSwipe = false;\n                if (Math.abs(y) > Math.abs(x))\n                    this.keyListner({ keyCode: y > 0 ? 40 : 38 });\n                else\n                    this.keyListner({ keyCode: x > 0 ? 39 : 37 });\n            }\n        }\n    }\n\n    render()\n    {\n        return (\n            <div\n                className=\"app-bg\"\n                onTouchStart={() =>\n                {\n                    this.allowSwipe = true;\n                }}\n            >\n                <Swipe\n                    className=\"full-height flex flex-center\"\n                    onSwipeMove={this.onSwipeMove}\n                >\n                    <div className=\"container\">\n                        <div className=\"flex\">\n                            <div className=\"titleContainer\">\n                                <div className=\"border\">\n                                    <SnakeHeader />\n                                </div>\n                            </div>\n                            <div className=\"scoreContainer\">\n                                <div className=\"border\">\n                                    <ScoreBoard\n                                        bestScore={this.state.bestScore}\n                                        currentScore={this.state.currentScore}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"border mt-2\">\n                            <GameBoard\n                                getRandomInt={this.getRandomInt}\n                                boardWidth={this.boardWidth}\n                                boardHeight={this.boardHeight}\n                                snake={this.state.snake}\n                                currentScore={this.state.currentScore}\n                                foodCoordinate={this.state.foodCoordinate}\n                                foodClass={this.state.foodClass}\n                                gameOverDisplay={this.state.gameOverDisplay}\n                            />\n                        </div>\n\n                        {this.state.gameMenuDisplay && (\n                            <div className=\"border menu-overlay mt-2\">\n                                <div className=\"flex flex-center\">\n                                    <div className=\"snake-food snake menu-food mr-4\"></div>\n                                    <div className=\"game-over-text\">MENU</div>\n                                    <div className=\"snake-food snake invert menu-food ml-4\"></div>\n                                </div>\n                                <div className=\"flex mt-2\">\n                                    <span\n                                        onClick={this.startGame.bind(this, 200)}\n                                        className=\"snakeButton mr-1\"\n                                    >\n                                        EASY\n                                    </span>\n                                    <span\n                                        onClick={this.startGame.bind(this, 120)}\n                                        className=\"snakeButton mr-1 ml-1\"\n                                    >\n                                        MEDIUM\n                                    </span>\n                                    <span\n                                        onClick={this.startGame.bind(this, 75)}\n                                        className=\"snakeButton ml-1\"\n                                    >\n                                        HARD\n                                    </span>\n                                </div>\n                            </div>\n                        )}\n\n                        {this.state.gameOverDisplay && (\n                            <div className=\"border gameover-overlay mt-2\">\n                                <div className=\"game-over-text\">\n                                    {this.state.gameOverMsg}\n                                </div>\n                                <div className=\"flex mt-2\">\n                                    <span\n                                        onClick={this.endGame}\n                                        className=\"snakeButton mr-1 ml-1\"\n                                    >\n                                        RESTART\n                                    </span>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </Swipe>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}